import { rootId } from './constants'
import { ReactElement } from 'react'
import { VueConstructor } from 'vue/types'

export interface StyleOptions {
  // TODO: Do we really need all of these options?
  /**
   * Creates <link href="..." /> element for each stylesheet
   * @alias stylesheet
   */
  stylesheets?: string | string[]
  /**
   * Creates <link href="..." /> element for each stylesheet
   * @alias stylesheets
   */
  stylesheet?: string | string[]
  /**
   * Creates <style>...</style> element and inserts given CSS.
   * @alias styles
   */
  style?: string | string[]
  /**
   * Creates <style>...</style> element for each given CSS text.
   * @alias style
   */
  styles?: string | string[]
  /**
   * Loads each file and creates a <style>...</style> element
   * with the loaded CSS
   * @alias cssFile
   */
  cssFiles?: string | string[]
  /**
   * Single CSS file to load into a <style></style> element
   * @alias cssFile
   */
  cssFile?: string | string[]
}

export interface MountHook { (componentTestInstance: ComponentTestInstance): any }

/**
 * MountHooks give the framework entry points to hook into
 * @example
 * CypressComponentUtils
 */
interface MountHooks { setup?: MountHook, mount?: MountHook }

/**
 * Declaring the global namespace for
 * dependency injection of types and interfaces
 * */
declare global {
  namespace CypressComponentUtils {
    // Framework-specific options go here
    interface MountOptionExtensions {}
  }
}

export interface MountOptions extends CypressComponentUtils.MountOptionExtensions, MountHooks, StyleOptions {
  mountModeEnabled?: boolean
  rootId?: string

  // Framework-specific options will be passed in via MountOptionExtensions
}

export type Component = ReactElement | VueConstructor | HTMLElement | string | unknown

/** Mount Hooks */
export type ComponentTestInstance = {
  // generated by the test name and Math.random
  key: string

  // Merged options between the user input and defaults
  options: MountOptions

  // The component instance passed into mount
  component: Component

  // Will be set in mount hook
  rootEl?: HTMLElement
}

/** Default Options */

const NoopMountHook: MountHook = (_) => {}

class DefaultMountOptions implements MountOptions {
  mountModeEnabled = true
  rootId = rootId

  // Default Style Options
  cssFile = ''
  cssFiles = []
  styles = ''
  style = ''
  stylesheet = ''
  stylesheets = []

  // Default Mount Hooks
  setup = NoopMountHook
  mount = NoopMountHook
}

/**
 * Composing default options together
 * These will become merged together inside of the mount command
 */
export const defaultMountOptions = new DefaultMountOptions()
